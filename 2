// https://jasonbutz.info/2018/08/server-sent-events-with-node/
//https://github.com/luciopaiva/socketio-with-express/blob/master/server.js
//
const
  http = require("http"),
  express = require("express"),
  socketio = require("socket.io"),
  path  = require("path"),
  collabVersion = "0.0.2b";


// create a new express app
let app = express();
// create http server and wrap the express app
let server = http.createServer(app);
// bind socket.io to that server
// const io = socketio(server);
let io = socketio(server);

const SERVER_PORT = process.env.PORT || 3000;

let nextVisitorNumber = 1;
let onlineClients = new Set();

// data structures
var users = [];
var ids;
var headers;
var controls = [];
var events = [];
var consoleDisplay = false;
var rooms = ['Room1', 'Room2', 'Room3'];

// function generateRandomNumber() {
//   return (Math.floor(Math.random() * 1000)).toString();
// }

function onNewWebsocketConnection(socket) {
  // executed when a new connect is made
  console.info(`Socket ${socket.id} has connected.`);

  // assign socket to a room;
  socket.room = 'room1';

  // randomly assign socket to a room;
  // var roomIndex = Math.floor(Math.random() * (Object.keys(rooms).length));
  // socket.room = rooms[roomIndex];
  // console.log(roomIndex);

  onlineClients.add(socket.id);

  addUsers(socket.id);
  // print in server console the socket's id
  console.log('New user connected: ' + socket.id);
  // print the number of users
  console.log('Users connected: ' + users);
  // send control dump to newly conect client
  socket.emit('controlDump', controls);
  // emits connection established event (from server back to client)
  socket.emit('connectionEstabilished-max', {
    id: socket.id
  });
  // broadcasts connection established event to all clients
  socket.broadcast.emit('connectionEstabilishedGlobal', {
    id: socket.id
  });

  // send version of Collab-Hub Server
  socket.emit('serverMessage', 'Collab-Hub Version: ' + collabVersion + ". You're in Room " + socket.room);

  // will send a message only to this socket (different than using `io.emit()`, which would broadcast it)
  socket.emit("welcome", `Welcome! You are visitor number ${nextVisitorNumber++}`);

  // listeners
  socket.on('clearUsers', function() {
    socket.broadcast.emit('serverMessage', 'clearing user list');
    io.emit('serverMessage', 'clearing user list');
    if (consoleDisplay == 'true') {
      console.log("Clearing user list...");
    }
    clearUsers();
    listUsers();
  });

  socket.on('clearControls', function() {
    socket.broadcast.emit('serverMessage', 'clearing control list');
    if (consoleDisplay == 'true') {
      console.log("Clearing control list..");
    }
    clearControls();
    dumpControlValues();
  });

  socket.on('clearEvents', function() {
    socket.broadcast.emit('serverMessage', 'clearing events list');
    if (consoleDisplay == 'true') {
      console.log("Clearing events list..");
    }
    events = [];
    listEvents();
  });

  socket.on('chat', (data) => {
    var tempid = socket.id;
    for (let user of users) {
      if (user.id == socket.id) {
        if (user.username != '') {
          tempid = user.username;
          if (consoleDisplay == 'true') {
            console.log("using username for chat: " + socket.id);
          }
          break;
        }
      }
    }
    socket.broadcast.emit('chat', {
      id: tempid,
      chat: data
    });
    if (consoleDisplay == 'true') {
      console.log("chat message received and broadcast: " + tempid);
    }
  })

  // return a list of users
  socket.on('addUsername', function(data) {
    for (let user of users) {
      if (user.id == socket.id) {
        user.username = data;
        if (consoleDisplay == 'true') {
          console.log("updated username to id: " + socket.id);
        }
        listUsers();
        return;
      }
    }
    if (consoleDisplay == 'true') {
      console.log("create new username and id " + data + " " + socket.id);
    }
    users.push({
      id: socket.id,
      username: data
    });
    listUsers();
  });

  socket.on('event', function(header) {
    socket.broadcast.emit('event', header);
    if (consoleDisplay == 'true') {
      console.log('received event ' + header);
    }
    for (let event of events) {
      if (event.header == header) {
        if (consoleDisplay == 'true') {
          console.log("event already exists on events list: " + header);
        }
        return;
      }
    }
    events.push({
      "header": header
    });
    listEvents();
    if (consoleDisplay == 'true') {
      console.log("updated events list: " + header);
    }
  });

  socket.on('getEvents', function() {
    socket.emit('events', events);
    if (consoleDisplay == 'true') {
      console.log('sending events list');
    }
  });

  // return a list of users to requestor
  socket.on('getUsers', function() {
    listUsers();
  });

  // // clear users
  // socket.on('clearUsers', function() {
  //   clearUsers();
  // });

  // remove user
  socket.on('disconnect', function() {
    removeUser(socket.id);
    if (consoleDisplay == 'true') {
      console.log('A user disconnected - ' + socket.id);
    }
  });

  socket.on('control', function(data) {
    if (consoleDisplay == 'true') {
      console.log("control: " + data.header + " - " + data.values);
    }
    // updating existing headers
    for (let i = 0; i < controls.length; i++) {
      let control = controls[i];
      // console.log("chekcing index: " + i);
      // console.log(control.header);
      if (control.header == data.header) {
        // console.log("match!");
        control.values = data.values;
        // console.log('adding values to ' + data.header);
        return;
      }
    }
    // create new headers
    // var newValues = {};
    // for(let value for data. )

    if (data.header == null) {
      console.log("Control data without header...");
      return;
    }

    // if(typeof (data.values) == 'object'){
    //   var newObject = {};
    //   newObject.header = data.header;
    //   newObject.values = [];
    //   console.log("adding object of values...");
    //   for(let value of data.values){
    //     newObject.values.push(value);
    //   }
    //   controls.push(newObject);
    //   return;
    // }


    // new control header
    controls.push({
      header: data.header,
      values: data.values
    });
    // updateControl(data.header, data.values);
    if (consoleDisplay == 'true') {
      console.log('New Control Data: ' + data.header + " - " + data.values);
      console.log(controls);
    }
    dumpControlValues();
  });

  socket.on('getControl', function(header) {
    console.log(header);
    if (header == 'dump') {
      dumpControlValues();
    } else {
      var values = getControlValues(header);
      if (values != null) {
        socket.emit('control', values.header, values.values);
      } else {
        // server will return -1 (maybe a bad idea)
        socket.emit('control', header, null);
      }
    }
    // console.log('Getting Control Data...: ' + data + " - " + values.values);
  });

  socket.on('setConsoleDisplay', (bool) => {
    setConsoleDisplay(bool);
  });

  // functions
  function clearUsers() {
    users = [];
  }

  function clearControls() {
    controls = [];
  }

  function addUsers(data) {
    for (let user of users) {
      if (user.id == data) {
        console.log("*******-------id already exists");
        break;
      }
      listUsers();
    }
    if (consoleDisplay == 'true') {
      console.log("adding new user");
    }
    users.push({
      id: data,
      username: '',
      room: socket.room
    });
    listUsers();
  }

  function removeUser(id) {
    for (let user of users) {
      if (user.id == id) {
        console.log("removing from user list: " + id);
        users.pop(user);
      }
    }
    socket.emit('users', users);
    socket.broadcast.emit('users', users);
  }

  function listEvents() {
    socket.emit('events', events);
    socket.broadcast.emit('events', events);
  }

  function listUsers() {
    socket.emit('users', users);
    socket.broadcast.emit('users', users);
    if (consoleDisplay == 'true') {
      console.log(...users);
    }
  }

  function setConsoleDisplay(val) {
    consoleDisplay = val;
    console.log(`changed console display to ${consoleDisplay}`);
  }

  function dumpControlValues() {
    if (consoleDisplay == 'true') {
      console.log("dumping all control data");
    }
    // returns object / dict
    socket.emit('controlDump', controls);
    socket.broadcast.emit('controlDump', controls);
  }

  function getControlValues(header) {
    for (let control of controls) {
      if (consoleDisplay == 'true') {
        console.log(control.header);
      }
      if (control.header == header) {
        // console.log('match! ' + control.values);
        return control;
      }
    }
    if (consoleDisplay == 'true') {
      console.log("No such control values. " + header);
    }
    return null;
  }

  socket.on('switchRoom', function(newroom) {
    // leave the current room (stored in session)
    socket.leave(socket.room);
    // join new room, received as function parameter
    socket.join(newroom);
    socket.emit('updatechat', 'SERVER', 'you have connected to ' + newroom);
    // sent message to OLD room
    socket.broadcast.to(socket.room).emit('updatechat', 'SERVER', socket.username + ' has left this room');
    // update socket session room title
    socket.room = newroom;
    socket.broadcast.to(newroom).emit('updatechat', 'SERVER', socket.username + ' has joined this room');
    socket.emit('updaterooms', rooms, newroom);
  });


}

function startServer() {
  //

  // // create a new express app
  // const app = express();
  // // create http server and wrap the express app
  // const server = http.createServer(app);
  // // bind socket.io to that server
  // // const io = socketio(server);
  // const io = socketio(server);

  //

  // create a new express app
  app = express();
  // create http server and wrap the express app
  server = http.createServer(app);
  // bind socket.io to that server
  io = socketio(server);


  // // example on how to serve a simple API
  // app.get("/random", (req, res) => res.send(generateRandomNumber()));


  // ** working version
  // example on how to serve static files from a given folder
  app.use(express.static("public"));

  // ** test version
  // app.get('/', (req, res) => {
  //   res.sendFile(__dirname + '/public/' );
  // });



  // will fire for every new websocket connection
  io.on("connection", onNewWebsocketConnection);

  // important! must listen from `server`, not `app`, otherwise socket.io won't function correctly
  server.listen(SERVER_PORT, () => console.info(`Listening on port ${SERVER_PORT}.`));

  // will send one message per second to all its clients
  let secondsSinceServerStarted = 0;
  setInterval(() => {
    // console.log('starting interval transmissions');
    secondsSinceServerStarted++;
    io.emit("seconds", secondsSinceServerStarted);
    io.emit("online", users.length);
  }, 1000);
}

startServer();
